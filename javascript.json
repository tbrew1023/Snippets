{
	"forloop": {
	  "prefix": ["..for", "..forloop"],
	  "body": ["for (i = 0; ${1:i < arr.length}; i++) {", "\t$0", "}"],
	  "description": ""
	},
	"console.log": {
	  "prefix": ["..log", "..consolelog", "..console.log"],
	  "body": ["console.log($0);"],
	  "description": "Log to the console"
	},
	"labelled console.log": {
	  "prefix": [
		"..log labelled",
		"..label",
		"..console.label",
		"..labelled",
		"..console label",
	  ],
	  "body": ["console.log('$1', $2);"],
	  "description": "Generates labeled console.log"
	},
	"setTimeout(() => { ... })": {
		"prefix": ["..setTimeout", "..settimeout", "..wait", "..timeout"],
		"body": [
			"setTimeout(() => {",
			"\t$2",
			"}, $$1);",
		],
		"description": "Log blue output to console"
	},
	"blue console.log": {
	  "prefix": "..blue log",
	  "body": ["console.log('\\x1b[94m%s\\x1b[0m', `$1`);  //blue"],
	  "description": "Log blue output to console"
	},
	"cyan console.log": {
	  "prefix": "..cyan log",
	  "body": ["console.log('\\x1b[36m%s\\x1b[0m', `$1`);  //cyan"],
	  "description": "Log cyan output to console"
	},
	"green console.log": {
	  "prefix": "..green log",
	  "body": ["console.log('\\x1b[32m%s\\x1b[0m', `$1`);  //green"],
	  "description": "Log green output to console"
	},
	"yellow console.log": {
	  "prefix": "..yellow log",
	  "body": ["console.log('\\x1b[33m%s\\x1b[0m', `$1`);  //yellow"],
	  "description": "Log yellow output to console"
	},
	"red console.log": {
	  "prefix": "..red log",
	  "body": ["console.log('\\x1b[91m%s\\x1b[0m', `$1`);  //red"],
	  "description": "Log red output to console"
	},
	"pink console.log": {
	  "prefix": "..pink log",
	  "body": ["console.log('\\x1b[35m%s\\x1b[0m', `$1`);  //pink"],
	  "description": "Log pink output to console"
	},
	"clear the console": {
	  "prefix": ["clear", "..clear", "console.clear()"],
	  "body": ["console.clear();\n$0"],
	  "description": "Clears console"
	},
	"eslint disable line": {
	  "prefix": "ugh",
	  "body": ["// eslint-disable-line"],
	  "description": "Disables eslint for current line"
	},
	"document path": {
	  "prefix": ["path", "..path", "..current path", "..document path"],
	  "body": ["'$TM_FILEPATH'"],
	  "description": "get file path of current document"
	},
	"ðŸ‘‰ random int": {
	  "prefix": "!random",
	  "body": [
		"function random(max) {",
		"\treturn Math.floor(Math.random() * max);",
		"}"
	  ],
	  "description": "random integer between zero & max"
	},
	"then": {
	  "prefix": [".then"],
	  "body": [".then(($1) => {", "$2", "});"],
	  "description": "random integer between zero & max"
	},
	"ðŸ‘‰ watch(...)": {
		"prefix": "!watch",
		"body": [
			"watch($1, (val) => {",
			"\t$2",
			"});",
		],
		"description": "Vue 3 watch method"
	},
	"ðŸ‘‰ onMounted(() => {...})": {
		"prefix": "!mounted",
		"body": [
			"onMounted(() => {",
			"\t$0",
			"});",
		],
		"description": "Vue 3 onMounted() hook"
	},
	"ðŸ‘‰ onUnounted(() => {})": {
		"prefix": "!unmounted",
		"body": [
			"onUnounted(() => {",
			"\t$0",
			"});",
		],
		"description": "Vue 3 onUnounted() hook"
	},
	"ðŸ‘‰ const state = ref()": {
		"prefix": "!ref",
		"body": ["const $1 = ref($2);$0"],
		"description": "new ref"
	},
	"ðŸ‘‰ const state = reactive()": {
		"prefix": "!reactive",
		"body": ["const $1 = reactive($2);$0"],
		"description": "new reactive"
	},
	"ðŸ‘‰ import { useGlobalState } from '@/store/global'": {
		"prefix": "!global",
		"body": [
			"import { useGlobalState } from '@/store/global';",
			"const global = useGlobalState();",
		],
		"description": "import global state"
	},
	"ðŸ‘‰ import { ref, computed, watch, onMounted } from 'vue'": {
		"prefix": "!vue",
		"body": ["import { ref, computed, watch, onMounted } from 'vue';"],
		"description": "import vue stuff"
	},
	"ðŸ‘‰ import { utils, log } from '@/lib/utils'": {
		"prefix": "!utils",
		"body": ["import { utils, log } from '@/lib/utils';"],
		"description": "import global state"
	},
	"ðŸ‘‰ log.label()'": {
		"prefix": "!log",
		"body": ["log.label('$0', $0)"],
		"description": "labelled log"
	}
  }
